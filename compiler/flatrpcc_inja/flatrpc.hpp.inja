#include <variant>
#include <future>
#include <memory>

#include <frozen/unordered_map.h>
#include <frozen/string.h>

#include <flatrpc/rpcserverbase.hpp>
#include <flatrpc/rpcclientbase.hpp>
#include <flatrpc/rpcversion.hpp>

#include "{{ filename }}_generated.h"

#if FLATRPC_GITREV != {{ flatrpc_gitrev }}
#warning "flatrpcc and installed headers are built from different versions"
#endif

#pragma once

## for service in services

/* Base */

class {{ service.local }}Base {
public:
## for request in service.tables
  using {{ request.local }}TPtr = std::shared_ptr<{{ request.cpp }}T>;
  using {{ request.local }}TFuture = std::future<{{ request.local }}TPtr>;
  using {{ request.local }}TPromise = std::promise<{{ request.local }}TPtr>;
## endfor

  using TRequestVar = std::variant<
## for request in service.requests
    {{ request.local }}TPtr{% if not loop/is_last %},{% endif %}
## endfor
  >;
  using TResponseVar = std::variant<
## for response in service.responses
    {{ response.local }}TPtr{% if not loop/is_last %},{% endif %}
## endfor
  >;

  static constexpr frozen::unordered_map<frozen::string, size_t, {{ length(service.calls) }}> nameToReqVarIdx = {
## for call in service.calls
    {"{{ call.name }}", {{ call.request.index }} },
## endfor
  };
  static constexpr frozen::unordered_map<frozen::string, size_t, {{ length(service.calls) }}> nameToResVarIdx = {
## for call in service.calls
    {"{{ call.name }}", {{ call.response.index }} },
## endfor
  };

protected:
  struct RPCCall {
    virtual std::shared_ptr<TRequestVar> getRequest() = 0;
    virtual std::shared_ptr<TResponseVar> getResponse() = 0;
  };

## for call in service.calls
  struct {{ call.name }}RPCCall : public RPCCall {
    std::shared_ptr<TRequestVar> getRequest() override {
      auto ret = std::make_shared<TRequestVar>();
      ret->emplace<{{ call.request.index }}>();
      return ret;
    }
    std::shared_ptr<TResponseVar> getResponse() override {
      auto ret = std::make_shared<TResponseVar>();
      ret->emplace<{{ call.response.index }}>();
      return ret;
    }
  };
## endfor
};


/* Client */

class {{ service.nameClient }} : public {{ service.local }}Base, public RpcClientBase {
  using TResponsePromiseVar = std::variant<
## for response in service.responses
    {{ response.local }}TPromise{% if not loop/is_last %},{% endif %}
## endfor
  >;

public:
  using RpcClientBase::RpcClientBase;
## for call in service.calls
## if call.request.object.simple
  std::future<{{ call.response.local }}TPtr> {{ call.name }}(
## for field in call.request.object.fields
    {{ field.base_type_equivalent }} {{ field.name }}{% if not loop/is_last %},{% endif %}
## endfor
  );
## endif
  std::future<{{ call.response.local }}TPtr> {{ call.name }}({{ call.request.local }}TPtr &&req);
## endfor

private:
  void timeoutRequest(uint64_t requestId) override;
  void handleResponse(std::vector<unsigned char> &&response) override;
  uint64_t nextRequestId(TResponsePromiseVar &&prom, const std::string &callName);

  void makeRequest(std::string callName, TRequestVar, TResponsePromiseVar &&prom);

  std::recursive_mutex _requestMutex;
  uint64_t _requestId = 0;
  std::unordered_map<uint64_t, TResponsePromiseVar> _requestPromises;
};

/* ServerBase */

class {{ service.nameServer }} : public {{ service.local }}Base, public RpcServerBase {
public:
  using RpcServerBase::RpcServerBase;
private:
  template<class TMethodT>
  std::shared_ptr<TMethodT> unpack(std::string data) {
    using TMethod = typename TMethodT::TableType;
    std::shared_ptr<TMethodT> ptr;
    flatbuffers::Verifier verifier((uint8_t *)data.data(), data.size());

    if (!verifier.VerifyBuffer<TMethod>(nullptr)) {
      PLOG_ERROR << "Error verifying buffer";
      return ptr;
    }

    auto method = flatbuffers::GetRoot<TMethod>(data.data());
    ptr = std::make_shared<TMethodT>();
    method->UnPackTo(ptr.get());

    return ptr;
  }

  template<class TMethodT>
  std::vector<signed char> pack(std::shared_ptr<TMethodT> ptr) {
    using TMethod = typename TMethodT::TableType;

    flatbuffers::FlatBufferBuilder fbb;
    flatbuffers::Offset<TMethod> rep;

    rep = TMethod::Pack(fbb, ptr.get());
    fbb.Finish(rep);

    return std::vector<signed char>(fbb.GetBufferPointer(), fbb.GetBufferPointer() + fbb.GetSize());
  }
protected:
  std::vector<unsigned char> handleRequest(std::vector<unsigned char> &&reqData, const TRouting &routing) override {
    auto reqInt = unpackInt(std::move(reqData));
    const auto replyType = getReplyType(reqInt->type);

    try {
## for call in service.calls
      if (reqInt->name == "{{ call.name }}") {
        auto req = unpack<{{ call.request.cpp }}T>({reqInt->data.data(), reqInt->data.data() + reqInt->data.size()});
        auto rep = handle{{ call.name }}(move(req), routing).get();
        return packInt(reqInt->requestId, replyType, reqInt->name, pack(rep));
      } else
## endfor
      {
        throw exception("Unknown request name");
      }
    } catch (std::exception &e) {
      return packInt(reqInt->requestId, replyType, reqInt->name, e);
    }
  }
public:
## for call in service.calls
  virtual {{ call.response.local }}TFuture handle{{ call.name }}({{ call.request.local }}TPtr &&req, const TRouting &routing) = 0;
## endfor
};

## endfor


/*
{{ objects }}
*/
