// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIMPLE_EXAMPLES_SIMPLE_H_
#define FLATBUFFERS_GENERATED_SIMPLE_EXAMPLES_SIMPLE_H_

#include "flatbuffers/flatbuffers.h"

namespace examples {
namespace simple {

struct HelloReply;
struct HelloReplyBuilder;
struct HelloReplyT;

struct HelloRequest;
struct HelloRequestBuilder;
struct HelloRequestT;

bool operator==(const HelloReplyT &lhs, const HelloReplyT &rhs);
bool operator!=(const HelloReplyT &lhs, const HelloReplyT &rhs);
bool operator==(const HelloRequestT &lhs, const HelloRequestT &rhs);
bool operator!=(const HelloRequestT &lhs, const HelloRequestT &rhs);

inline const flatbuffers::TypeTable *HelloReplyTypeTable();

inline const flatbuffers::TypeTable *HelloRequestTypeTable();

struct HelloReplyT : public flatbuffers::NativeTable {
  typedef HelloReply TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "examples.simple.HelloReplyT";
  }
  std::string message;
  HelloReplyT() {
  }
};

inline bool operator==(const HelloReplyT &lhs, const HelloReplyT &rhs) {
  return
      (lhs.message == rhs.message);
}

inline bool operator!=(const HelloReplyT &lhs, const HelloReplyT &rhs) {
    return !(lhs == rhs);
}


struct HelloReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HelloReplyT NativeTableType;
  typedef HelloReplyBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return HelloReplyTypeTable();
  }
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "examples.simple.HelloReply";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE = 4
  };
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  flatbuffers::String *mutable_message() {
    return GetPointer<flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
  HelloReplyT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(HelloReplyT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<HelloReply> Pack(flatbuffers::FlatBufferBuilder &_fbb, const HelloReplyT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct HelloReplyBuilder {
  typedef HelloReply Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(HelloReply::VT_MESSAGE, message);
  }
  explicit HelloReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HelloReplyBuilder &operator=(const HelloReplyBuilder &);
  flatbuffers::Offset<HelloReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HelloReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<HelloReply> CreateHelloReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> message = 0) {
  HelloReplyBuilder builder_(_fbb);
  builder_.add_message(message);
  return builder_.Finish();
}

struct HelloReply::Traits {
  using type = HelloReply;
  static auto constexpr Create = CreateHelloReply;
};

inline flatbuffers::Offset<HelloReply> CreateHelloReplyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return examples::simple::CreateHelloReply(
      _fbb,
      message__);
}

flatbuffers::Offset<HelloReply> CreateHelloReply(flatbuffers::FlatBufferBuilder &_fbb, const HelloReplyT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct HelloRequestT : public flatbuffers::NativeTable {
  typedef HelloRequest TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "examples.simple.HelloRequestT";
  }
  std::string name;
  HelloRequestT() {
  }
};

inline bool operator==(const HelloRequestT &lhs, const HelloRequestT &rhs) {
  return
      (lhs.name == rhs.name);
}

inline bool operator!=(const HelloRequestT &lhs, const HelloRequestT &rhs) {
    return !(lhs == rhs);
}


struct HelloRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HelloRequestT NativeTableType;
  typedef HelloRequestBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return HelloRequestTypeTable();
  }
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "examples.simple.HelloRequest";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
  HelloRequestT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(HelloRequestT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<HelloRequest> Pack(flatbuffers::FlatBufferBuilder &_fbb, const HelloRequestT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct HelloRequestBuilder {
  typedef HelloRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(HelloRequest::VT_NAME, name);
  }
  explicit HelloRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HelloRequestBuilder &operator=(const HelloRequestBuilder &);
  flatbuffers::Offset<HelloRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HelloRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<HelloRequest> CreateHelloRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  HelloRequestBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

struct HelloRequest::Traits {
  using type = HelloRequest;
  static auto constexpr Create = CreateHelloRequest;
};

inline flatbuffers::Offset<HelloRequest> CreateHelloRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return examples::simple::CreateHelloRequest(
      _fbb,
      name__);
}

flatbuffers::Offset<HelloRequest> CreateHelloRequest(flatbuffers::FlatBufferBuilder &_fbb, const HelloRequestT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline HelloReplyT *HelloReply::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new HelloReplyT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void HelloReply::UnPackTo(HelloReplyT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = message(); if (_e) _o->message = _e->str(); }
}

inline flatbuffers::Offset<HelloReply> HelloReply::Pack(flatbuffers::FlatBufferBuilder &_fbb, const HelloReplyT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateHelloReply(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<HelloReply> CreateHelloReply(flatbuffers::FlatBufferBuilder &_fbb, const HelloReplyT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const HelloReplyT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _message = _o->message.empty() ? 0 : _fbb.CreateString(_o->message);
  return examples::simple::CreateHelloReply(
      _fbb,
      _message);
}

inline HelloRequestT *HelloRequest::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new HelloRequestT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void HelloRequest::UnPackTo(HelloRequestT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
}

inline flatbuffers::Offset<HelloRequest> HelloRequest::Pack(flatbuffers::FlatBufferBuilder &_fbb, const HelloRequestT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateHelloRequest(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<HelloRequest> CreateHelloRequest(flatbuffers::FlatBufferBuilder &_fbb, const HelloRequestT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const HelloRequestT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  return examples::simple::CreateHelloRequest(
      _fbb,
      _name);
}

inline const flatbuffers::TypeTable *HelloReplyTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "message"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *HelloRequestTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "name"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace simple
}  // namespace examples

#endif  // FLATBUFFERS_GENERATED_SIMPLE_EXAMPLES_SIMPLE_H_
